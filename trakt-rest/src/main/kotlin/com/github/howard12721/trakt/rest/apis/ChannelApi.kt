/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.github.howard12721.trakt.rest.apis

import com.github.howard12721.trakt.rest.infrastructure.*
import com.github.howard12721.trakt.rest.models.*
import io.ktor.client.*
import io.ktor.client.engine.*
import kotlinx.serialization.KSerializer
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.json.Json
import kotlinx.serialization.serializer

open class ChannelApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(
        baseUrl = baseUrl,
        httpClientEngine = httpClientEngine,
        httpClientConfig = httpClientConfig,
        jsonBlock = jsonSerializer
    )

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ) : super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * チャンネルを作成
     * チャンネルを作成します。 階層が6以上になるチャンネルは作成できません。
     * @param postChannelRequest  (optional)
     * @return Channel
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createChannel(postChannelRequest: PostChannelRequest? = null): HttpResponse<Channel> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = postChannelRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/channels",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * チャンネル情報を変更
     * 指定したチャンネルの情報を変更します。 変更には権限が必要です。 ルートチャンネルに移動させる場合は、&#x60;parent&#x60;に&#x60;00000000-0000-0000-0000-000000000000&#x60;を指定してください。
     * @param channelId チャンネルUUID
     * @param patchChannelRequest  (optional)
     * @return void
     */
    open suspend fun editChannel(
        channelId: kotlin.String,
        patchChannelRequest: PatchChannelRequest? = null
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = patchChannelRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/channels/{channelId}".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * チャンネルの通知購読者を編集
     * 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの通知購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
     * @param channelId チャンネルUUID
     * @param patchChannelSubscribersRequest  (optional)
     * @return void
     */
    open suspend fun editChannelSubscribers(
        channelId: kotlin.String,
        patchChannelSubscribersRequest: PatchChannelSubscribersRequest? = null
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = patchChannelSubscribersRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/channels/{channelId}/subscribers".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * チャンネルトピックを編集
     * 指定したチャンネルのトピックを編集します。 アーカイブされているチャンネルのトピックは編集できません。
     * @param channelId チャンネルUUID
     * @param putChannelTopicRequest  (optional)
     * @return void
     */
    open suspend fun editChannelTopic(
        channelId: kotlin.String,
        putChannelTopicRequest: PutChannelTopicRequest? = null
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = putChannelTopicRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/channels/{channelId}/topic".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * チャンネル情報を取得
     * 指定したチャンネルの情報を取得します。
     * @param channelId チャンネルUUID
     * @return Channel
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getChannel(channelId: kotlin.String): HttpResponse<Channel> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/channels/{channelId}".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * チャンネル参加中のBOTのリストを取得
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @param channelId チャンネルUUID
     * @return kotlin.collections.List<BotUser>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getChannelBots(channelId: kotlin.String): HttpResponse<kotlin.collections.List<BotUser>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/channels/{channelId}/bots".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetChannelBotsResponse>().map { value }
    }

    @Serializable(GetChannelBotsResponse.Companion::class)
    private class GetChannelBotsResponse(val value: List<BotUser>) {
        companion object : KSerializer<GetChannelBotsResponse> {
            private val serializer: KSerializer<List<BotUser>> = serializer<List<BotUser>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetChannelBotsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetChannelBotsResponse(serializer.deserialize(decoder))
        }
    }


    /**
     * enum for parameter order
     */
    @Serializable
    enum class OrderGetChannelEvents(val value: kotlin.String) {

        @SerialName(value = "asc")
        asc("asc"),

        @SerialName(value = "desc")
        desc("desc")

    }

    /**
     * チャンネルイベントのリストを取得
     * 指定したチャンネルのイベントリストを取得します。
     * @param channelId チャンネルUUID
     * @param limit 取得する件数 (optional)
     * @param offset 取得するオフセット (optional, default to 0)
     * @param since 取得する時間範囲の開始日時 (optional)
     * @param until 取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order 昇順か降順か (optional, default to desc)
     * @return kotlin.collections.List<ChannelEvent>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getChannelEvents(
        channelId: kotlin.String,
        limit: kotlin.Int? = null,
        offset: kotlin.Int? = 0,
        since: kotlinx.datetime.Instant? = null,
        until: kotlinx.datetime.Instant? = null,
        inclusive: kotlin.Boolean? = false,
        order: OrderGetChannelEvents? = OrderGetChannelEvents.desc
    ): HttpResponse<kotlin.collections.List<ChannelEvent>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        since?.apply { localVariableQuery["since"] = listOf("$since") }
        until?.apply { localVariableQuery["until"] = listOf("$until") }
        inclusive?.apply { localVariableQuery["inclusive"] = listOf("$inclusive") }
        order?.apply { localVariableQuery["order"] = listOf("${order.value}") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/channels/{channelId}/events".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetChannelEventsResponse>().map { value }
    }

    @Serializable(GetChannelEventsResponse.Companion::class)
    private class GetChannelEventsResponse(val value: List<ChannelEvent>) {
        companion object : KSerializer<GetChannelEventsResponse> {
            private val serializer: KSerializer<List<ChannelEvent>> = serializer<List<ChannelEvent>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetChannelEventsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetChannelEventsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 指定したチャンネルパスを取得
     *
     * @param channelId チャンネルUUID
     * @return ChannelPath
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getChannelPath(channelId: kotlin.String): HttpResponse<ChannelPath> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/channels/{channelId}/path".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * チャンネルピンのリストを取得
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     * @param channelId チャンネルUUID
     * @return kotlin.collections.List<Pin>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getChannelPins(channelId: kotlin.String): HttpResponse<kotlin.collections.List<Pin>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/channels/{channelId}/pins".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetChannelPinsResponse>().map { value }
    }

    @Serializable(GetChannelPinsResponse.Companion::class)
    private class GetChannelPinsResponse(val value: List<Pin>) {
        companion object : KSerializer<GetChannelPinsResponse> {
            private val serializer: KSerializer<List<Pin>> = serializer<List<Pin>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetChannelPinsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetChannelPinsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * チャンネル統計情報を取得
     * 指定したチャンネルの統計情報を取得します。
     * @param channelId チャンネルUUID
     * @param excludeDeletedMessages 削除されたメッセージを除外するかどうか(デフォルト false) (optional)
     * @return ChannelStats
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getChannelStats(
        channelId: kotlin.String,
        excludeDeletedMessages: kotlin.Boolean? = null
    ): HttpResponse<ChannelStats> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        excludeDeletedMessages?.apply {
            localVariableQuery["exclude-deleted-messages"] = listOf("$excludeDeletedMessages")
        }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/channels/{channelId}/stats".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * チャンネルの通知購読者のリストを取得
     * 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
     * @param channelId チャンネルUUID
     * @return kotlin.collections.List<kotlin.String>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getChannelSubscribers(channelId: kotlin.String): HttpResponse<kotlin.collections.List<kotlin.String>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/channels/{channelId}/subscribers".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetChannelSubscribersResponse>().map { value }
    }

    @Serializable(GetChannelSubscribersResponse.Companion::class)
    private class GetChannelSubscribersResponse(val value: List<kotlin.String>) {
        companion object : KSerializer<GetChannelSubscribersResponse> {
            private val serializer: KSerializer<List<kotlin.String>> = serializer<List<kotlin.String>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetChannelSubscribersResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetChannelSubscribersResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * チャンネルトピックを取得
     * 指定したチャンネルのトピックを取得します。
     * @param channelId チャンネルUUID
     * @return ChannelTopic
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getChannelTopic(channelId: kotlin.String): HttpResponse<ChannelTopic> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/channels/{channelId}/topic".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * チャンネル閲覧者リストを取得
     * 指定したチャンネルの閲覧者のリストを取得します。
     * @param channelId チャンネルUUID
     * @return kotlin.collections.List<ChannelViewer>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getChannelViewers(channelId: kotlin.String): HttpResponse<kotlin.collections.List<ChannelViewer>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/channels/{channelId}/viewers".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetChannelViewersResponse>().map { value }
    }

    @Serializable(GetChannelViewersResponse.Companion::class)
    private class GetChannelViewersResponse(val value: List<ChannelViewer>) {
        companion object : KSerializer<GetChannelViewersResponse> {
            private val serializer: KSerializer<List<ChannelViewer>> = serializer<List<ChannelViewer>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetChannelViewersResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetChannelViewersResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * チャンネルリストを取得
     * チャンネルのリストを取得します。
     * @param includeDm ダイレクトメッセージチャンネルをレスポンスに含めるかどうか (optional, default to false)
     * @param path パスが一致するチャンネルのみを取得する (optional)
     * @return ChannelList
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getChannels(
        includeDm: kotlin.Boolean? = false,
        path: kotlin.String? = null
    ): HttpResponse<ChannelList> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        includeDm?.apply { localVariableQuery["include-dm"] = listOf("$includeDm") }
        path?.apply { localVariableQuery["path"] = listOf("$path") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/channels",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * enum for parameter order
     */
    @Serializable
    enum class OrderGetMessages(val value: kotlin.String) {

        @SerialName(value = "asc")
        asc("asc"),

        @SerialName(value = "desc")
        desc("desc")

    }

    /**
     * チャンネルメッセージのリストを取得
     * 指定したチャンネルのメッセージのリストを取得します。
     * @param channelId チャンネルUUID
     * @param limit 取得する件数 (optional)
     * @param offset 取得するオフセット (optional, default to 0)
     * @param since 取得する時間範囲の開始日時 (optional)
     * @param until 取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order 昇順か降順か (optional, default to desc)
     * @return kotlin.collections.List<Message>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMessages(
        channelId: kotlin.String,
        limit: kotlin.Int? = null,
        offset: kotlin.Int? = 0,
        since: kotlinx.datetime.Instant? = null,
        until: kotlinx.datetime.Instant? = null,
        inclusive: kotlin.Boolean? = false,
        order: OrderGetMessages? = OrderGetMessages.desc
    ): HttpResponse<kotlin.collections.List<Message>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        since?.apply { localVariableQuery["since"] = listOf("$since") }
        until?.apply { localVariableQuery["until"] = listOf("$until") }
        inclusive?.apply { localVariableQuery["inclusive"] = listOf("$inclusive") }
        order?.apply { localVariableQuery["order"] = listOf("${order.value}") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/channels/{channelId}/messages".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetMessagesResponse>().map { value }
    }

    @Serializable(GetMessagesResponse.Companion::class)
    private class GetMessagesResponse(val value: List<Message>) {
        companion object : KSerializer<GetMessagesResponse> {
            private val serializer: KSerializer<List<Message>> = serializer<List<Message>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetMessagesResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetMessagesResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * DMチャンネル情報を取得
     * 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
     * @param userId
     * @return DMChannel
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getUserDMChannel(userId: kotlin.String): HttpResponse<DMChannel> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{userId}/dm-channel".replace("{" + "userId" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * チャンネルにメッセージを投稿
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
     * @param channelId チャンネルUUID
     * @param postMessageRequest  (optional)
     * @return Message
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postMessage(
        channelId: kotlin.String,
        postMessageRequest: PostMessageRequest? = null
    ): HttpResponse<Message> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = postMessageRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/channels/{channelId}/messages".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * チャンネルの通知購読者を設定
     * 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの通知購読状態はオフになります。 また、存在しないユーザーを指定した場合は無視されます。
     * @param channelId チャンネルUUID
     * @param putChannelSubscribersRequest  (optional)
     * @return void
     */
    open suspend fun setChannelSubscribers(
        channelId: kotlin.String,
        putChannelSubscribersRequest: PutChannelSubscribersRequest? = null
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = putChannelSubscribersRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/channels/{channelId}/subscribers".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
