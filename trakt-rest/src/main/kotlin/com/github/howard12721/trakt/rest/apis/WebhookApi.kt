/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.github.howard12721.trakt.rest.apis

import com.github.howard12721.trakt.rest.infrastructure.*
import com.github.howard12721.trakt.rest.models.Message
import com.github.howard12721.trakt.rest.models.PatchWebhookRequest
import com.github.howard12721.trakt.rest.models.PostWebhookRequest
import com.github.howard12721.trakt.rest.models.Webhook
import io.ktor.client.*
import io.ktor.client.engine.*
import io.ktor.client.request.forms.*
import kotlinx.serialization.KSerializer
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.json.Json
import kotlinx.serialization.serializer

open class WebhookApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(
        baseUrl = baseUrl,
        httpClientEngine = httpClientEngine,
        httpClientConfig = httpClientConfig,
        jsonBlock = jsonSerializer
    )

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ) : super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Webhookのアイコンを変更
     * 指定したWebhookのアイコン画像を変更します。
     * @param webhookId WebhookUUID
     * @param file アイコン画像(2MBまでのpng, jpeg, gif)
     * @return void
     */
    open suspend fun changeWebhookIcon(
        webhookId: kotlin.String,
        file: io.ktor.client.request.forms.FormPart<io.ktor.client.request.forms.InputProvider>
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            formData {
                file?.apply { append(file) }
            }

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/webhooks/{webhookId}/icon".replace("{" + "webhookId" + "}", "$webhookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return multipartFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Webhookを新規作成
     * Webhookを新規作成します。 &#x60;secret&#x60;が空文字の場合、insecureウェブフックが作成されます。
     * @param postWebhookRequest  (optional)
     * @return Webhook
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createWebhook(postWebhookRequest: PostWebhookRequest? = null): HttpResponse<Webhook> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = postWebhookRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/webhooks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Webhookを削除
     * 指定したWebhookを削除します。 Webhookによって投稿されたメッセージは削除されません。
     * @param webhookId WebhookUUID
     * @return void
     */
    open suspend fun deleteWebhook(webhookId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/webhooks/{webhookId}".replace("{" + "webhookId" + "}", "$webhookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Webhook情報を変更
     * 指定したWebhookの情報を変更します。
     * @param webhookId WebhookUUID
     * @param patchWebhookRequest  (optional)
     * @return void
     */
    open suspend fun editWebhook(
        webhookId: kotlin.String,
        patchWebhookRequest: PatchWebhookRequest? = null
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = patchWebhookRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/webhooks/{webhookId}".replace("{" + "webhookId" + "}", "$webhookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Webhook情報を取得
     * 指定したWebhookの詳細を取得します。
     * @param webhookId WebhookUUID
     * @return Webhook
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getWebhook(webhookId: kotlin.String): HttpResponse<Webhook> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/webhooks/{webhookId}".replace("{" + "webhookId" + "}", "$webhookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Webhookのアイコンを取得
     * 指定したWebhookのアイコン画像を取得します
     * @param webhookId WebhookUUID
     * @return com.github.howard12721.trakt.rest.infrastructure.OctetByteArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getWebhookIcon(webhookId: kotlin.String): HttpResponse<com.github.howard12721.trakt.rest.infrastructure.OctetByteArray> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/webhooks/{webhookId}/icon".replace("{" + "webhookId" + "}", "$webhookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * enum for parameter order
     */
    @Serializable
    enum class OrderGetWebhookMessages(val value: kotlin.String) {

        @SerialName(value = "asc")
        asc("asc"),

        @SerialName(value = "desc")
        desc("desc")

    }

    /**
     * Webhookの投稿メッセージのリストを取得
     * 指定されたWebhookが投稿したメッセージのリストを返します。
     * @param webhookId WebhookUUID
     * @param limit 取得する件数 (optional)
     * @param offset 取得するオフセット (optional, default to 0)
     * @param since 取得する時間範囲の開始日時 (optional)
     * @param until 取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order 昇順か降順か (optional, default to desc)
     * @return kotlin.collections.List<Message>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getWebhookMessages(
        webhookId: kotlin.String,
        limit: kotlin.Int? = null,
        offset: kotlin.Int? = 0,
        since: kotlinx.datetime.Instant? = null,
        until: kotlinx.datetime.Instant? = null,
        inclusive: kotlin.Boolean? = false,
        order: OrderGetWebhookMessages? = OrderGetWebhookMessages.desc
    ): HttpResponse<kotlin.collections.List<Message>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        since?.apply { localVariableQuery["since"] = listOf("$since") }
        until?.apply { localVariableQuery["until"] = listOf("$until") }
        inclusive?.apply { localVariableQuery["inclusive"] = listOf("$inclusive") }
        order?.apply { localVariableQuery["order"] = listOf("${order.value}") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/webhooks/{webhookId}/messages".replace("{" + "webhookId" + "}", "$webhookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetWebhookMessagesResponse>().map { value }
    }

    @Serializable(GetWebhookMessagesResponse.Companion::class)
    private class GetWebhookMessagesResponse(val value: List<Message>) {
        companion object : KSerializer<GetWebhookMessagesResponse> {
            private val serializer: KSerializer<List<Message>> = serializer<List<Message>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetWebhookMessagesResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetWebhookMessagesResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Webhook情報のリストを取得します
     * Webhookのリストを取得します。 allがtrueで無い場合は、自分がオーナーのWebhookのリストを返します。
     * @param all 全てのWebhookを取得します。権限が必要です。 (optional, default to false)
     * @return kotlin.collections.List<Webhook>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getWebhooks(all: kotlin.Boolean? = false): HttpResponse<kotlin.collections.List<Webhook>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        all?.apply { localVariableQuery["all"] = listOf("$all") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/webhooks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetWebhooksResponse>().map { value }
    }

    @Serializable(GetWebhooksResponse.Companion::class)
    private class GetWebhooksResponse(val value: List<Webhook>) {
        companion object : KSerializer<GetWebhooksResponse> {
            private val serializer: KSerializer<List<Webhook>> = serializer<List<Webhook>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetWebhooksResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetWebhooksResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Webhookを送信
     * Webhookにメッセージを投稿します。 secureなウェブフックに対しては&#x60;X-TRAQ-Signature&#x60;ヘッダーが必須です。 アーカイブされているチャンネルには投稿できません。
     * @param webhookId WebhookUUID
     * @param xTRAQSignature リクエストボディシグネチャ(Secretが設定されている場合は必須) (optional)
     * @param xTRAQChannelId 投稿先のチャンネルID(変更する場合) (optional)
     * @param embed メンション・チャンネルリンクを自動埋め込みする場合に1を指定する (optional, default to 0)
     * @param body  (optional)
     * @return void
     */
    open suspend fun postWebhook(
        webhookId: kotlin.String,
        xTRAQSignature: kotlin.String? = null,
        xTRAQChannelId: kotlin.String? = null,
        embed: kotlin.Int? = 0,
        body: kotlin.String? = null
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = body

        val localVariableQuery = mutableMapOf<String, List<String>>()
        embed?.apply { localVariableQuery["embed"] = listOf("$embed") }
        val localVariableHeaders = mutableMapOf<String, String>()
        xTRAQSignature?.apply { localVariableHeaders["X-TRAQ-Signature"] = this.toString() }
        xTRAQChannelId?.apply { localVariableHeaders["X-TRAQ-Channel-Id"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/webhooks/{webhookId}".replace("{" + "webhookId" + "}", "$webhookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
