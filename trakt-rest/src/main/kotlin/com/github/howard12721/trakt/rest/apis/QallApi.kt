/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.github.howard12721.trakt.rest.apis

import com.github.howard12721.trakt.rest.infrastructure.*
import com.github.howard12721.trakt.rest.models.*
import io.ktor.client.*
import io.ktor.client.engine.*
import io.ktor.client.request.forms.*
import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializable
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.json.Json
import kotlinx.serialization.serializer

open class QallApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(
        baseUrl = baseUrl,
        httpClientEngine = httpClientEngine,
        httpClientConfig = httpClientConfig,
        jsonBlock = jsonSerializer
    )

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ) : super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * ルームでの発言権限を変更
     * ルーム内の参加者の発言権限を変更します。
     * @param roomId ルームUUID
     * @param qallParticipantRequest 発言権限を変更する参加者の情報
     * @return QallParticipantResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun changeParticipantRole(
        roomId: kotlin.String,
        qallParticipantRequest: kotlin.collections.List<QallParticipantRequest>
    ): HttpResponse<QallParticipantResponse> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = ChangeParticipantRoleRequest(qallParticipantRequest)

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/qall/rooms/{roomId}/participants".replace("{" + "roomId" + "}", "$roomId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    @Serializable(ChangeParticipantRoleRequest.Companion::class)
    private class ChangeParticipantRoleRequest(val value: List<QallParticipantRequest>) {
        companion object : KSerializer<ChangeParticipantRoleRequest> {
            private val serializer: KSerializer<List<QallParticipantRequest>> =
                serializer<List<QallParticipantRequest>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: ChangeParticipantRoleRequest) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = ChangeParticipantRoleRequest(serializer.deserialize(decoder))
        }
    }

    /**
     * LiveKitトークンを取得
     * 指定したルームに参加するためのLiveKitトークンを取得します。
     * @param roomId ルームUUID (optional)
     * @param isWebinar ウェビナールームかどうか(デフォルト false) (optional)
     * @return QallTokenResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getLiveKitToken(
        roomId: kotlin.String? = null,
        isWebinar: kotlin.Boolean? = null
    ): HttpResponse<QallTokenResponse> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        roomId?.apply { localVariableQuery["roomId"] = listOf("$roomId") }
        isWebinar?.apply { localVariableQuery["isWebinar"] = listOf("$isWebinar") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/qall/token",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * LiveKitエンドポイントを取得
     * 接続可能なLiveKitエンドポイントを取得します。
     * @return QallEndpointResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getQallEndpoints(): HttpResponse<QallEndpointResponse> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/qall/endpoints",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * ルームのメタデータを取得
     * ルームのメタデータを取得します。
     * @param roomId ルームUUID
     * @return QallMetadataResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getRoomMetadata(roomId: kotlin.String): HttpResponse<QallMetadataResponse> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/qall/rooms/{roomId}/metadata".replace("{" + "roomId" + "}", "$roomId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * ルームと参加者の一覧を取得
     * 現在存在する(またはアクティブな)ルームと、そのルームに所属している参加者情報を取得します。
     * @return kotlin.collections.List<QallRoomWithParticipants>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getRooms(): HttpResponse<kotlin.collections.List<QallRoomWithParticipants>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/qall/rooms",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetRoomsResponse>().map { value }
    }

    @Serializable(GetRoomsResponse.Companion::class)
    private class GetRoomsResponse(val value: List<QallRoomWithParticipants>) {
        companion object : KSerializer<GetRoomsResponse> {
            private val serializer: KSerializer<List<QallRoomWithParticipants>> =
                serializer<List<QallRoomWithParticipants>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetRoomsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetRoomsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * サウンドボード用の音声一覧を取得
     * DBに保存されたサウンドボード情報を取得します。   各アイテムには soundId, soundName, stampId が含まれます。
     * @return kotlin.collections.List<SoundboardItem>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getSoundboardList(): HttpResponse<kotlin.collections.List<SoundboardItem>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/qall/soundboard",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetSoundboardListResponse>().map { value }
    }

    @Serializable(GetSoundboardListResponse.Companion::class)
    private class GetSoundboardListResponse(val value: List<SoundboardItem>) {
        companion object : KSerializer<GetSoundboardListResponse> {
            private val serializer: KSerializer<List<SoundboardItem>> = serializer<List<SoundboardItem>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetSoundboardListResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetSoundboardListResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * LiveKit Webhook受信
     * LiveKit側で設定したWebhookから呼び出されるエンドポイントです。   参加者の入室・退出などのイベントを受け取り、サーバ内で処理を行います。
     * @param body
     * @return void
     */
    open suspend fun liveKitWebhook(body: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = LiveKitWebhookRequest(mapOf(body to body))

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/qall/webhook",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    @Serializable(LiveKitWebhookRequest.Companion::class)
    private class LiveKitWebhookRequest(val value: Map<kotlin.String, kotlin.String>) {
        companion object : KSerializer<LiveKitWebhookRequest> {
            private val serializer: KSerializer<Map<kotlin.String, kotlin.String>> =
                serializer<Map<String, kotlin.String>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: LiveKitWebhookRequest) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = LiveKitWebhookRequest(serializer.deserialize(decoder))
        }
    }

    /**
     * サウンドボード用の短い音声ファイルをアップロード
     * 15秒程度の短い音声ファイルを multipart/form-data で送信し、S3(互換ストレージ)にアップロードします。   クライアントは「soundName」というフィールドを送信し、それをDBに保存して関連付けを行います。   また、サーバ側で soundId を自動生成し、S3のファイル名に使用します。
     * @param audio アップロードする音声ファイル(20秒以内)
     * @param soundName ユーザが自由につけるサウンド名
     * @param stampId アイコンスタンプID (optional)
     * @return SoundboardUploadResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postSoundboard(
        audio: io.ktor.client.request.forms.FormPart<io.ktor.client.request.forms.InputProvider>,
        soundName: kotlin.String,
        stampId: kotlin.String? = null
    ): HttpResponse<SoundboardUploadResponse> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            formData {
                audio?.apply { append(audio) }
                soundName?.apply { append("soundName", soundName) }
                stampId?.apply { append("stampId", stampId) }
            }

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/qall/soundboard",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return multipartFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * アップロード済み音声を LiveKit ルームで再生
     * S3上にある音声ファイルの署名付きURLを生成し、   Ingressを介して指定ルームに音声を流します。     該当ルームに参加しているユーザであれば再生可能とします。
     * @param soundboardPlayRequest
     * @return SoundboardPlayResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postSoundboardPlay(soundboardPlayRequest: SoundboardPlayRequest): HttpResponse<SoundboardPlayResponse> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = soundboardPlayRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/qall/soundboard/play",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * ルームのメタデータを更新
     * ルームのメタデータを更新します。
     * @param roomId ルームUUID
     * @param qallMetadataRequest ルームのメタデータ
     * @return void
     */
    open suspend fun updateRoomMetadata(
        roomId: kotlin.String,
        qallMetadataRequest: QallMetadataRequest
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = qallMetadataRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/qall/rooms/{roomId}/metadata".replace("{" + "roomId" + "}", "$roomId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
