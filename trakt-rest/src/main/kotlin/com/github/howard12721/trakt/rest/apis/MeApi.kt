/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.github.howard12721.trakt.rest.apis

import com.github.howard12721.trakt.rest.infrastructure.*
import com.github.howard12721.trakt.rest.models.*
import io.ktor.client.*
import io.ktor.client.engine.*
import io.ktor.client.request.forms.*
import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializable
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.json.Json
import kotlinx.serialization.serializer

open class MeApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(
        baseUrl = baseUrl,
        httpClientEngine = httpClientEngine,
        httpClientConfig = httpClientConfig,
        jsonBlock = jsonSerializer
    )

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ) : super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * チャンネルをスターに追加
     * 指定したチャンネルをスターチャンネルに追加します。 スター済みのチャンネルIDを指定した場合、204を返します。 不正なチャンネルIDを指定した場合、400を返します。
     * @param postStarRequest  (optional)
     * @return void
     */
    open suspend fun addMyStar(postStarRequest: PostStarRequest? = null): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = postStarRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/users/me/stars",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 自分にタグを追加
     * 自分に新しくタグを追加します。
     * @param postUserTagRequest  (optional)
     * @return UserTag
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun addMyUserTag(postUserTagRequest: PostUserTagRequest? = null): HttpResponse<UserTag> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = postUserTagRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/users/me/tags",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 自分のアイコン画像を変更
     * 自分のアイコン画像を変更します。
     * @param file アイコン画像(2MBまでのpng, jpeg, gif)
     * @return void
     */
    open suspend fun changeMyIcon(file: io.ktor.client.request.forms.FormPart<io.ktor.client.request.forms.InputProvider>): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            formData {
                file?.apply { append(file) }
            }

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/users/me/icon",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return multipartFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * メッセージ引用通知の設定情報を変更
     * メッセージ引用通知の設定情報を変更します
     * @param putNotifyCitationRequest  (optional)
     * @return void
     */
    open suspend fun changeMyNotifyCitation(putNotifyCitationRequest: PutNotifyCitationRequest? = null): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = putNotifyCitationRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/users/me/settings/notify-citation",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 自分のパスワードを変更
     * 自身のパスワードを変更します。
     * @param putMyPasswordRequest  (optional)
     * @return void
     */
    open suspend fun changeMyPassword(putMyPasswordRequest: PutMyPasswordRequest? = null): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = putMyPasswordRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/users/me/password",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 自分のユーザー情報を変更
     * 自身のユーザー情報を変更します。
     * @param patchMeRequest  (optional)
     * @return void
     */
    open suspend fun editMe(patchMeRequest: PatchMeRequest? = null): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = patchMeRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/users/me",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 自分のタグを編集
     * 自分の指定したタグの状態を変更します。
     * @param tagId タグUUID
     * @param patchUserTagRequest  (optional)
     * @return void
     */
    open suspend fun editMyUserTag(
        tagId: kotlin.String,
        patchUserTagRequest: PatchUserTagRequest? = null
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = patchUserTagRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/users/me/tags/{tagId}".replace("{" + "tagId" + "}", "$tagId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 自分のユーザー詳細を取得
     * 自身のユーザー詳細情報を取得します。
     * @return MyUserDetail
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMe(): HttpResponse<MyUserDetail> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 自分のチャンネル購読状態を取得
     * 自身のチャンネル購読状態を取得します。
     * @return kotlin.collections.List<UserSubscribeState>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMyChannelSubscriptions(): HttpResponse<kotlin.collections.List<UserSubscribeState>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me/subscriptions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetMyChannelSubscriptionsResponse>().map { value }
    }

    @Serializable(GetMyChannelSubscriptionsResponse.Companion::class)
    private class GetMyChannelSubscriptionsResponse(val value: List<UserSubscribeState>) {
        companion object : KSerializer<GetMyChannelSubscriptionsResponse> {
            private val serializer: KSerializer<List<UserSubscribeState>> = serializer<List<UserSubscribeState>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetMyChannelSubscriptionsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) =
                GetMyChannelSubscriptionsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 外部ログインアカウント一覧を取得
     * 自分に紐付けられている外部ログインアカウント一覧を取得します。
     * @return kotlin.collections.List<ExternalProviderUser>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMyExternalAccounts(): HttpResponse<kotlin.collections.List<ExternalProviderUser>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me/ex-accounts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetMyExternalAccountsResponse>().map { value }
    }

    @Serializable(GetMyExternalAccountsResponse.Companion::class)
    private class GetMyExternalAccountsResponse(val value: List<ExternalProviderUser>) {
        companion object : KSerializer<GetMyExternalAccountsResponse> {
            private val serializer: KSerializer<List<ExternalProviderUser>> = serializer<List<ExternalProviderUser>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetMyExternalAccountsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetMyExternalAccountsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 自分のアイコン画像を取得
     * 自分のアイコン画像を取得します。
     * @return com.github.howard12721.trakt.rest.infrastructure.OctetByteArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMyIcon(): HttpResponse<com.github.howard12721.trakt.rest.infrastructure.OctetByteArray> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me/icon",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * メッセージ引用通知の設定情報を取得
     * メッセージ引用通知の設定情報を変更します。
     * @return GetNotifyCitation
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMyNotifyCitation(): HttpResponse<GetNotifyCitation> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me/settings/notify-citation",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * QRコードを取得
     * 自身のQRコードを取得します。 返されたQRコードまたはトークンは、発行後の5分間のみ有効です
     * @param token 画像でなくトークン文字列で返すかどうか (optional, default to false)
     * @return com.github.howard12721.trakt.rest.infrastructure.OctetByteArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMyQRCode(token: kotlin.Boolean? = false): HttpResponse<com.github.howard12721.trakt.rest.infrastructure.OctetByteArray> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        token?.apply { localVariableQuery["token"] = listOf("$token") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me/qr-code",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 自分のログインセッションリストを取得
     * 自分のログインセッションのリストを取得します。
     * @return kotlin.collections.List<LoginSession>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMySessions(): HttpResponse<kotlin.collections.List<LoginSession>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me/sessions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetMySessionsResponse>().map { value }
    }

    @Serializable(GetMySessionsResponse.Companion::class)
    private class GetMySessionsResponse(val value: List<LoginSession>) {
        companion object : KSerializer<GetMySessionsResponse> {
            private val serializer: KSerializer<List<LoginSession>> = serializer<List<LoginSession>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetMySessionsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetMySessionsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * スタンプ履歴を取得
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     * @param limit 件数 (optional, default to 100)
     * @return kotlin.collections.List<StampHistoryEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMyStampHistory(limit: kotlin.Int? = 100): HttpResponse<kotlin.collections.List<StampHistoryEntry>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me/stamp-history",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetMyStampHistoryResponse>().map { value }
    }

    @Serializable(GetMyStampHistoryResponse.Companion::class)
    private class GetMyStampHistoryResponse(val value: List<StampHistoryEntry>) {
        companion object : KSerializer<GetMyStampHistoryResponse> {
            private val serializer: KSerializer<List<StampHistoryEntry>> = serializer<List<StampHistoryEntry>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetMyStampHistoryResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetMyStampHistoryResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * スターチャンネルリストを取得
     * 自分がスターしているチャンネルのUUIDの配列を取得します。
     * @return kotlin.collections.List<kotlin.String>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMyStars(): HttpResponse<kotlin.collections.List<kotlin.String>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me/stars",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetMyStarsResponse>().map { value }
    }

    @Serializable(GetMyStarsResponse.Companion::class)
    private class GetMyStarsResponse(val value: List<kotlin.String>) {
        companion object : KSerializer<GetMyStarsResponse> {
            private val serializer: KSerializer<List<kotlin.String>> = serializer<List<kotlin.String>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetMyStarsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetMyStarsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 有効トークンのリストを取得
     * 有効な自分に発行されたOAuth2トークンのリストを取得します。
     * @return kotlin.collections.List<ActiveOAuth2Token>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMyTokens(): HttpResponse<kotlin.collections.List<ActiveOAuth2Token>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me/tokens",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetMyTokensResponse>().map { value }
    }

    @Serializable(GetMyTokensResponse.Companion::class)
    private class GetMyTokensResponse(val value: List<ActiveOAuth2Token>) {
        companion object : KSerializer<GetMyTokensResponse> {
            private val serializer: KSerializer<List<ActiveOAuth2Token>> = serializer<List<ActiveOAuth2Token>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetMyTokensResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetMyTokensResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 未読チャンネルを取得
     * 自分が現在未読のチャンネルの未読情報を取得します。
     * @return kotlin.collections.List<UnreadChannel>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMyUnreadChannels(): HttpResponse<kotlin.collections.List<UnreadChannel>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me/unread",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetMyUnreadChannelsResponse>().map { value }
    }

    @Serializable(GetMyUnreadChannelsResponse.Companion::class)
    private class GetMyUnreadChannelsResponse(val value: List<UnreadChannel>) {
        companion object : KSerializer<GetMyUnreadChannelsResponse> {
            private val serializer: KSerializer<List<UnreadChannel>> = serializer<List<UnreadChannel>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetMyUnreadChannelsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetMyUnreadChannelsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 自分のタグリストを取得
     * 自分に付けられているタグの配列を取得します。
     * @return kotlin.collections.List<UserTag>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMyUserTags(): HttpResponse<kotlin.collections.List<UserTag>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me/tags",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetMyUserTagsResponse>().map { value }
    }

    @Serializable(GetMyUserTagsResponse.Companion::class)
    private class GetMyUserTagsResponse(val value: List<UserTag>) {
        companion object : KSerializer<GetMyUserTagsResponse> {
            private val serializer: KSerializer<List<UserTag>> = serializer<List<UserTag>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetMyUserTagsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetMyUserTagsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 自身のチャンネル閲覧状態一覧を取得
     * 自身のチャンネル閲覧状態一覧を取得します。
     * @return kotlin.collections.List<MyChannelViewState>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMyViewStates(): HttpResponse<kotlin.collections.List<MyChannelViewState>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me/view-states",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetMyViewStatesResponse>().map { value }
    }

    @Serializable(GetMyViewStatesResponse.Companion::class)
    private class GetMyViewStatesResponse(val value: List<MyChannelViewState>) {
        companion object : KSerializer<GetMyViewStatesResponse> {
            private val serializer: KSerializer<List<MyChannelViewState>> = serializer<List<MyChannelViewState>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetMyViewStatesResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetMyViewStatesResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 自分のユーザー詳細を取得 (OIDC UserInfo)
     * OIDCトークンを用いてユーザー詳細を取得します。 OIDC UserInfo Endpointです。
     * @return OIDCUserInfo
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getOIDCUserInfo(): HttpResponse<OIDCUserInfo> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me/oidc",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * ユーザー設定を取得
     * ユーザー設定を取得します。
     * @return UserSettings
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getUserSettings(): HttpResponse<UserSettings> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me/settings",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 外部ログインアカウントを紐付ける
     * 自分に外部ログインアカウントを紐付けます。 指定した&#x60;providerName&#x60;がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
     * @param postLinkExternalAccount  (optional)
     * @return void
     */
    open suspend fun linkExternalAccount(postLinkExternalAccount: PostLinkExternalAccount? = null): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = postLinkExternalAccount

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/users/me/ex-accounts/link",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * チャンネルを既読にする
     * 自分が未読のチャンネルを既読にします。
     * @param channelId チャンネルUUID
     * @return void
     */
    open suspend fun readChannel(channelId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/users/me/unread/{channelId}".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * FCMデバイスを登録
     * 自身のFCMデバイスを登録します。
     * @param postMyFCMDeviceRequest  (optional)
     * @return void
     */
    open suspend fun registerFCMDevice(postMyFCMDeviceRequest: PostMyFCMDeviceRequest? = null): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = postMyFCMDeviceRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/users/me/fcm-device",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * チャンネルをスターから削除します
     * 既にスターから削除されているチャンネルを指定した場合は204を返します。
     * @param channelId チャンネルUUID
     * @return void
     */
    open suspend fun removeMyStar(channelId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/users/me/stars/{channelId}".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 自分からタグを削除します
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @param tagId タグUUID
     * @return void
     */
    open suspend fun removeMyUserTag(tagId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/users/me/tags/{tagId}".replace("{" + "tagId" + "}", "$tagId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * セッションを無効化
     * 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も&#x60;204&#x60;を返します。
     * @param sessionId セッションUUID
     * @return void
     */
    open suspend fun revokeMySession(sessionId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/users/me/sessions/{sessionId}".replace("{" + "sessionId" + "}", "$sessionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * トークンの認可を取り消す
     * 自分の指定したトークンの認可を取り消します。
     * @param tokenId OAuth2トークンUUID
     * @return void
     */
    open suspend fun revokeMyToken(tokenId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/users/me/tokens/{tokenId}".replace("{" + "tokenId" + "}", "$tokenId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * チャンネル購読レベルを設定
     * 自身の指定したチャンネルの購読レベルを設定します。
     * @param channelId チャンネルUUID
     * @param putChannelSubscribeLevelRequest  (optional)
     * @return void
     */
    open suspend fun setChannelSubscribeLevel(
        channelId: kotlin.String,
        putChannelSubscribeLevelRequest: PutChannelSubscribeLevelRequest? = null
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = putChannelSubscribeLevelRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/users/me/subscriptions/{channelId}".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 外部ログインアカウントの紐付けを解除
     * 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
     * @param postUnlinkExternalAccount  (optional)
     * @return void
     */
    open suspend fun unlinkExternalAccount(postUnlinkExternalAccount: PostUnlinkExternalAccount? = null): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = postUnlinkExternalAccount

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/users/me/ex-accounts/unlink",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
