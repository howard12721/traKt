/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.github.howard12721.trakt.rest.apis

import com.github.howard12721.trakt.rest.infrastructure.*
import com.github.howard12721.trakt.rest.models.PostWebRTCAuthenticateRequest
import com.github.howard12721.trakt.rest.models.WebRTCAuthenticateResult
import com.github.howard12721.trakt.rest.models.WebRTCUserState
import io.ktor.client.*
import io.ktor.client.engine.*
import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializable
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.json.Json
import kotlinx.serialization.serializer

internal open class WebrtcApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(
        baseUrl = baseUrl,
        httpClientEngine = httpClientEngine,
        httpClientConfig = httpClientConfig,
        jsonBlock = jsonSerializer
    )

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ) : super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * WebRTC状態を取得
     * 現在のWebRTC状態を取得します。
     * @return kotlin.collections.List<WebRTCUserState>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getWebRTCState(): HttpResponse<kotlin.collections.List<WebRTCUserState>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/webrtc/state",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetWebRTCStateResponse>().map { value }
    }

    @Serializable(GetWebRTCStateResponse.Companion::class)
    private class GetWebRTCStateResponse(val value: List<WebRTCUserState>) {
        companion object : KSerializer<GetWebRTCStateResponse> {
            private val serializer: KSerializer<List<WebRTCUserState>> = serializer<List<WebRTCUserState>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetWebRTCStateResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetWebRTCStateResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Skyway用認証API
     * Skyway WebRTC用の認証API
     * @param postWebRTCAuthenticateRequest  (optional)
     * @return WebRTCAuthenticateResult
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postWebRTCAuthenticate(postWebRTCAuthenticateRequest: PostWebRTCAuthenticateRequest? = null): HttpResponse<WebRTCAuthenticateResult> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = postWebRTCAuthenticateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/webrtc/authenticate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
