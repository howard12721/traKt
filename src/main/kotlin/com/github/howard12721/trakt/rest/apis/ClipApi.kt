/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.github.howard12721.trakt.rest.apis

import com.github.howard12721.trakt.rest.infrastructure.*
import com.github.howard12721.trakt.rest.models.*
import io.ktor.client.*
import io.ktor.client.engine.*
import kotlinx.serialization.KSerializer
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.json.Json
import kotlinx.serialization.serializer

internal open class ClipApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(
        baseUrl = baseUrl,
        httpClientEngine = httpClientEngine,
        httpClientConfig = httpClientConfig,
        jsonBlock = jsonSerializer
    )

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ) : super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * メッセージをクリップフォルダに追加
     * 指定したメッセージを指定したクリップフォルダに追加します。
     * @param folderId クリップフォルダUUID
     * @param postClipFolderMessageRequest  (optional)
     * @return ClippedMessage
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun clipMessage(
        folderId: kotlin.String,
        postClipFolderMessageRequest: PostClipFolderMessageRequest? = null
    ): HttpResponse<ClippedMessage> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = postClipFolderMessageRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/clip-folders/{folderId}/messages".replace("{" + "folderId" + "}", "$folderId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * クリップフォルダを作成
     * クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
     * @param postClipFolderRequest  (optional)
     * @return ClipFolder
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createClipFolder(postClipFolderRequest: PostClipFolderRequest? = null): HttpResponse<ClipFolder> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = postClipFolderRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/clip-folders",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * クリップフォルダを削除
     * 指定したクリップフォルダを削除します。
     * @param folderId クリップフォルダUUID
     * @return void
     */
    open suspend fun deleteClipFolder(folderId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/clip-folders/{folderId}".replace("{" + "folderId" + "}", "$folderId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * クリップフォルダ情報を編集
     * 指定したクリップフォルダの情報を編集します。
     * @param folderId クリップフォルダUUID
     * @param patchClipFolderRequest  (optional)
     * @return void
     */
    open suspend fun editClipFolder(
        folderId: kotlin.String,
        patchClipFolderRequest: PatchClipFolderRequest? = null
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = patchClipFolderRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/clip-folders/{folderId}".replace("{" + "folderId" + "}", "$folderId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * クリップフォルダ情報を取得
     * 指定したクリップフォルダの情報を取得します。
     * @param folderId クリップフォルダUUID
     * @return ClipFolder
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getClipFolder(folderId: kotlin.String): HttpResponse<ClipFolder> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/clip-folders/{folderId}".replace("{" + "folderId" + "}", "$folderId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * クリップフォルダのリストを取得
     * 自身が所有するクリップフォルダのリストを取得します。
     * @return kotlin.collections.List<ClipFolder>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getClipFolders(): HttpResponse<kotlin.collections.List<ClipFolder>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/clip-folders",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetClipFoldersResponse>().map { value }
    }

    @Serializable(GetClipFoldersResponse.Companion::class)
    private class GetClipFoldersResponse(val value: List<ClipFolder>) {
        companion object : KSerializer<GetClipFoldersResponse> {
            private val serializer: KSerializer<List<ClipFolder>> = serializer<List<ClipFolder>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetClipFoldersResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetClipFoldersResponse(serializer.deserialize(decoder))
        }
    }


    /**
     * enum for parameter order
     */
    @Serializable
    enum class OrderGetClips(val value: kotlin.String) {

        @SerialName(value = "asc")
        asc("asc"),

        @SerialName(value = "desc")
        desc("desc")

    }

    /**
     * フォルダ内のクリップのリストを取得
     * 指定したフォルダ内のクリップのリストを取得します。 &#x60;order&#x60;を指定しない場合、クリップした日時の新しい順で返されます。
     * @param folderId クリップフォルダUUID
     * @param limit 取得する件数 (optional)
     * @param offset 取得するオフセット (optional, default to 0)
     * @param order 昇順か降順か (optional, default to desc)
     * @return kotlin.collections.List<ClippedMessage>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getClips(
        folderId: kotlin.String,
        limit: kotlin.Int? = null,
        offset: kotlin.Int? = 0,
        order: OrderGetClips? = OrderGetClips.desc
    ): HttpResponse<kotlin.collections.List<ClippedMessage>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        order?.apply { localVariableQuery["order"] = listOf("${order.value}") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/clip-folders/{folderId}/messages".replace("{" + "folderId" + "}", "$folderId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetClipsResponse>().map { value }
    }

    @Serializable(GetClipsResponse.Companion::class)
    private class GetClipsResponse(val value: List<ClippedMessage>) {
        companion object : KSerializer<GetClipsResponse> {
            private val serializer: KSerializer<List<ClippedMessage>> = serializer<List<ClippedMessage>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetClipsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetClipsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 自分のクリップを取得
     * 対象のメッセージの自分のクリップの一覧を返します。
     * @param messageId メッセージUUID
     * @return kotlin.collections.List<MessageClip>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMessageClips(messageId: kotlin.String): HttpResponse<kotlin.collections.List<MessageClip>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/messages/{messageId}/clips".replace("{" + "messageId" + "}", "$messageId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetMessageClipsResponse>().map { value }
    }

    @Serializable(GetMessageClipsResponse.Companion::class)
    private class GetMessageClipsResponse(val value: List<MessageClip>) {
        companion object : KSerializer<GetMessageClipsResponse> {
            private val serializer: KSerializer<List<MessageClip>> = serializer<List<MessageClip>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetMessageClipsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetMessageClipsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * メッセージをクリップフォルダから除外
     * 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
     * @param folderId クリップフォルダUUID
     * @param messageId メッセージUUID
     * @return void
     */
    open suspend fun unclipMessage(folderId: kotlin.String, messageId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/clip-folders/{folderId}/messages/{messageId}".replace("{" + "folderId" + "}", "$folderId")
                .replace("{" + "messageId" + "}", "$messageId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
