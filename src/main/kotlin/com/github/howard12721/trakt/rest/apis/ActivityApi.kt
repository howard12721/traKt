/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.github.howard12721.trakt.rest.apis

import com.github.howard12721.trakt.rest.infrastructure.*
import com.github.howard12721.trakt.rest.models.ActivityTimelineMessage
import io.ktor.client.*
import io.ktor.client.engine.*
import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializable
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.json.Json
import kotlinx.serialization.serializer

internal open class ActivityApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(
        baseUrl = baseUrl,
        httpClientEngine = httpClientEngine,
        httpClientConfig = httpClientConfig,
        jsonBlock = jsonSerializer
    )

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ) : super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * アクテビティタイムラインを取得
     * パブリックチャンネルの直近の投稿メッセージを作成日時の降順で取得します。 &#x60;all&#x60;が&#x60;true&#x60;でない場合、購読チャンネルのみのタイムラインを取得します
     * @param limit 取得する件数 (optional, default to 50)
     * @param all 全てのチャンネルのタイムラインを取得する (optional, default to false)
     * @param perChannel 同じチャンネルのメッセージは最新のもののみ取得するか (optional, default to false)
     * @return kotlin.collections.List<ActivityTimelineMessage>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getActivityTimeline(
        limit: kotlin.Int? = 50,
        all: kotlin.Boolean? = false,
        perChannel: kotlin.Boolean? = false
    ): HttpResponse<kotlin.collections.List<ActivityTimelineMessage>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        all?.apply { localVariableQuery["all"] = listOf("$all") }
        perChannel?.apply { localVariableQuery["per_channel"] = listOf("$perChannel") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/activity/timeline",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetActivityTimelineResponse>().map { value }
    }

    @Serializable(GetActivityTimelineResponse.Companion::class)
    private class GetActivityTimelineResponse(val value: List<ActivityTimelineMessage>) {
        companion object : KSerializer<GetActivityTimelineResponse> {
            private val serializer: KSerializer<List<ActivityTimelineMessage>> =
                serializer<List<ActivityTimelineMessage>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetActivityTimelineResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetActivityTimelineResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * オンラインユーザーリストを取得
     * 現在オンラインな(SSEまたはWSが接続中)ユーザーのUUIDのリストを返します。
     * @return kotlin.collections.List<kotlin.String>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getOnlineUsers(): HttpResponse<kotlin.collections.List<kotlin.String>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/activity/onlines",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetOnlineUsersResponse>().map { value }
    }

    @Serializable(GetOnlineUsersResponse.Companion::class)
    private class GetOnlineUsersResponse(val value: List<kotlin.String>) {
        companion object : KSerializer<GetOnlineUsersResponse> {
            private val serializer: KSerializer<List<kotlin.String>> = serializer<List<kotlin.String>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetOnlineUsersResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetOnlineUsersResponse(serializer.deserialize(decoder))
        }
    }

}
