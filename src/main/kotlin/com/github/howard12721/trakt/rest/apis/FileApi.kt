/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.github.howard12721.trakt.rest.apis

import com.github.howard12721.trakt.rest.infrastructure.*
import com.github.howard12721.trakt.rest.models.FileInfo
import com.github.howard12721.trakt.rest.models.ThumbnailType
import io.ktor.client.*
import io.ktor.client.engine.*
import io.ktor.client.request.forms.*
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.Json

internal open class FileApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(
        baseUrl = baseUrl,
        httpClientEngine = httpClientEngine,
        httpClientConfig = httpClientConfig,
        jsonBlock = jsonSerializer
    )

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ) : super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * ファイルを削除
     * 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
     * @param fileId ファイルUUID
     * @return void
     */
    open suspend fun deleteFile(fileId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/files/{fileId}".replace("{" + "fileId" + "}", "$fileId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * ファイルをダウンロード
     * 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
     * @param fileId ファイルUUID
     * @param dl 1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます (optional)
     * @return com.github.howard12721.trakt.rest.infrastructure.OctetByteArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getFile(
        fileId: kotlin.String,
        dl: kotlin.Int? = null
    ): HttpResponse<com.github.howard12721.trakt.rest.infrastructure.OctetByteArray> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        dl?.apply { localVariableQuery["dl"] = listOf("$dl") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/files/{fileId}".replace("{" + "fileId" + "}", "$fileId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * ファイルメタを取得
     * 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
     * @param fileId ファイルUUID
     * @return FileInfo
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getFileMeta(fileId: kotlin.String): HttpResponse<FileInfo> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/files/{fileId}/meta".replace("{" + "fileId" + "}", "$fileId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * enum for parameter order
     */
    @Serializable
    enum class OrderGetFiles(val value: kotlin.String) {

        @SerialName(value = "asc")
        asc("asc"),

        @SerialName(value = "desc")
        desc("desc")

    }

    /**
     * ファイルメタのリストを取得
     * 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ&#x60;channelId&#x60;, &#x60;mine&#x60;の少なくともいずれかが必須です。
     * @param channelId アップロード先チャンネルUUID (optional)
     * @param limit 取得する件数 (optional)
     * @param offset 取得するオフセット (optional, default to 0)
     * @param since 取得する時間範囲の開始日時 (optional)
     * @param until 取得する時間範囲の終了日時 (optional)
     * @param inclusive 範囲の端を含めるかどうか (optional, default to false)
     * @param order 昇順か降順か (optional, default to desc)
     * @param mine アップロード者が自分のファイルのみを取得するか (optional, default to false)
     * @return kotlin.collections.List<FileInfo>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getFiles(
        channelId: kotlin.String? = null,
        limit: kotlin.Int? = null,
        offset: kotlin.Int? = 0,
        since: kotlinx.datetime.Instant? = null,
        until: kotlinx.datetime.Instant? = null,
        inclusive: kotlin.Boolean? = false,
        order: OrderGetFiles? = OrderGetFiles.desc,
        mine: kotlin.Boolean? = false
    ): HttpResponse<kotlin.collections.List<FileInfo>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        channelId?.apply { localVariableQuery["channelId"] = listOf("$channelId") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        since?.apply { localVariableQuery["since"] = listOf("$since") }
        until?.apply { localVariableQuery["until"] = listOf("$until") }
        inclusive?.apply { localVariableQuery["inclusive"] = listOf("$inclusive") }
        order?.apply { localVariableQuery["order"] = listOf("${order.value}") }
        mine?.apply { localVariableQuery["mine"] = listOf("$mine") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/files",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetFilesResponse>().map { value }
    }

    @Serializable(GetFilesResponse.Companion::class)
    private class GetFilesResponse(val value: List<FileInfo>) {
        companion object : KSerializer<GetFilesResponse> {
            private val serializer: KSerializer<List<FileInfo>> = serializer<List<FileInfo>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetFilesResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetFilesResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * サムネイル画像を取得
     * 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
     * @param fileId ファイルUUID
     * @param type 取得するサムネイルのタイプ (optional, default to image)
     * @return com.github.howard12721.trakt.rest.infrastructure.OctetByteArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getThumbnailImage(
        fileId: kotlin.String,
        type: ThumbnailType? = ThumbnailType.image
    ): HttpResponse<com.github.howard12721.trakt.rest.infrastructure.OctetByteArray> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        type?.apply { localVariableQuery["type"] = listOf("${type.value}") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/files/{fileId}/thumbnail".replace("{" + "fileId" + "}", "$fileId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * ファイルをアップロード
     * 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
     * @param file ファイル本体
     * @param channelId アップロード先チャンネルUUID
     * @return FileInfo
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postFile(
        file: io.ktor.client.request.forms.FormPart<io.ktor.client.request.forms.InputProvider>,
        channelId: kotlin.String
    ): HttpResponse<FileInfo> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            formData {
                file?.apply { append(file) }
                channelId?.apply { append("channelId", channelId) }
            }

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/files",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return multipartFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
