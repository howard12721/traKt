/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.github.howard12721.trakt.rest.apis

import com.github.howard12721.trakt.rest.infrastructure.*
import com.github.howard12721.trakt.rest.models.*
import io.ktor.client.*
import io.ktor.client.engine.*
import io.ktor.http.*
import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializable
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.json.Json
import kotlinx.serialization.serializer

internal open class Oauth2Api : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(
        baseUrl = baseUrl,
        httpClientEngine = httpClientEngine,
        httpClientConfig = httpClientConfig,
        jsonBlock = jsonSerializer
    )

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ) : super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * OAuth2クライアントを作成
     * OAuth2クライアントを作成します。
     * @param postClientRequest  (optional)
     * @return OAuth2ClientDetail
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createClient(postClientRequest: PostClientRequest? = null): HttpResponse<OAuth2ClientDetail> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = postClientRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/clients",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * OAuth2クライアントを削除
     * 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
     * @param clientId OAuth2クライアントUUID
     * @return void
     */
    open suspend fun deleteClient(clientId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/clients/{clientId}".replace("{" + "clientId" + "}", "$clientId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * OAuth2クライアント情報を変更
     * 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
     * @param clientId OAuth2クライアントUUID
     * @param patchClientRequest  (optional)
     * @return void
     */
    open suspend fun editClient(
        clientId: kotlin.String,
        patchClientRequest: PatchClientRequest? = null
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = patchClientRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/clients/{clientId}".replace("{" + "clientId" + "}", "$clientId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * OAuth2クライアント情報を取得
     * 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
     * @param clientId OAuth2クライアントUUID
     * @param detail 詳細情報を含めるかどうか (optional, default to false)
     * @return GetClient200Response
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getClient(
        clientId: kotlin.String,
        detail: kotlin.Boolean? = false
    ): HttpResponse<GetClient200Response> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        detail?.apply { localVariableQuery["detail"] = listOf("$detail") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/clients/{clientId}".replace("{" + "clientId" + "}", "$clientId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * OAuth2クライアントのリストを取得
     * 自身が開発者のOAuth2クライアントのリストを取得します。 &#x60;all&#x60;が&#x60;true&#x60;の場合、全開発者の全クライアントのリストを返します。
     * @param all 全てのクライアントを取得するかどうか (optional, default to false)
     * @return kotlin.collections.List<OAuth2Client>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getClients(all: kotlin.Boolean? = false): HttpResponse<kotlin.collections.List<OAuth2Client>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        all?.apply { localVariableQuery["all"] = listOf("$all") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/clients",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetClientsResponse>().map { value }
    }

    @Serializable(GetClientsResponse.Companion::class)
    private class GetClientsResponse(val value: List<OAuth2Client>) {
        companion object : KSerializer<GetClientsResponse> {
            private val serializer: KSerializer<List<OAuth2Client>> = serializer<List<OAuth2Client>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetClientsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetClientsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 有効トークンのリストを取得
     * 有効な自分に発行されたOAuth2トークンのリストを取得します。
     * @return kotlin.collections.List<ActiveOAuth2Token>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMyTokens(): HttpResponse<kotlin.collections.List<ActiveOAuth2Token>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me/tokens",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetMyTokensResponse>().map { value }
    }

    @Serializable(GetMyTokensResponse.Companion::class)
    private class GetMyTokensResponse(val value: List<ActiveOAuth2Token>) {
        companion object : KSerializer<GetMyTokensResponse> {
            private val serializer: KSerializer<List<ActiveOAuth2Token>> = serializer<List<ActiveOAuth2Token>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetMyTokensResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetMyTokensResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * OAuth2 認可エンドポイント
     * OAuth2 認可エンドポイント
     * @param clientId
     * @param responseType  (optional)
     * @param redirectUri  (optional)
     * @param scope  (optional)
     * @param state  (optional)
     * @param codeChallenge  (optional)
     * @param codeChallengeMethod  (optional)
     * @param nonce  (optional)
     * @param prompt  (optional)
     * @return void
     */
    open suspend fun getOAuth2Authorize(
        clientId: kotlin.String,
        responseType: OAuth2ResponseType? = null,
        redirectUri: kotlin.String? = null,
        scope: kotlin.String? = null,
        state: kotlin.String? = null,
        codeChallenge: kotlin.String? = null,
        codeChallengeMethod: kotlin.String? = null,
        nonce: kotlin.String? = null,
        prompt: OAuth2Prompt? = null
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        responseType?.apply { localVariableQuery["response_type"] = listOf("${responseType.value}") }
        clientId?.apply { localVariableQuery["client_id"] = listOf("$clientId") }
        redirectUri?.apply { localVariableQuery["redirect_uri"] = listOf("$redirectUri") }
        scope?.apply { localVariableQuery["scope"] = listOf("$scope") }
        state?.apply { localVariableQuery["state"] = listOf("$state") }
        codeChallenge?.apply { localVariableQuery["code_challenge"] = listOf("$codeChallenge") }
        codeChallengeMethod?.apply { localVariableQuery["code_challenge_method"] = listOf("$codeChallengeMethod") }
        nonce?.apply { localVariableQuery["nonce"] = listOf("$nonce") }
        prompt?.apply { localVariableQuery["prompt"] = listOf("${prompt.value}") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/oauth2/authorize",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * OAuth2 認可エンドポイント
     * OAuth2 認可エンドポイント
     * @param clientId
     * @param responseType  (optional)
     * @param redirectUri  (optional)
     * @param scope  (optional)
     * @param state  (optional)
     * @param codeChallenge  (optional)
     * @param codeChallengeMethod  (optional)
     * @param nonce  (optional)
     * @param prompt  (optional)
     * @return void
     */
    open suspend fun postOAuth2Authorize(
        clientId: kotlin.String,
        responseType: OAuth2ResponseType? = null,
        redirectUri: kotlin.String? = null,
        scope: kotlin.String? = null,
        state: kotlin.String? = null,
        codeChallenge: kotlin.String? = null,
        codeChallengeMethod: kotlin.String? = null,
        nonce: kotlin.String? = null,
        prompt: OAuth2Prompt? = null
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            ParametersBuilder().also {
                responseType?.apply { it.append("response_type", responseType.toString()) }
                clientId?.apply { it.append("client_id", clientId.toString()) }
                redirectUri?.apply { it.append("redirect_uri", redirectUri.toString()) }
                scope?.apply { it.append("scope", scope.toString()) }
                state?.apply { it.append("state", state.toString()) }
                codeChallenge?.apply { it.append("code_challenge", codeChallenge.toString()) }
                codeChallengeMethod?.apply { it.append("code_challenge_method", codeChallengeMethod.toString()) }
                nonce?.apply { it.append("nonce", nonce.toString()) }
                prompt?.apply { it.append("prompt", prompt.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/oauth2/authorize",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * OAuth2 認可承諾API
     * OAuth2 認可承諾
     * @param submit 承諾する場合は\\\&quot;approve\\\&quot;
     * @return void
     */
    open suspend fun postOAuth2AuthorizeDecide(submit: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            ParametersBuilder().also {
                submit?.apply { it.append("submit", submit.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/oauth2/authorize/decide",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * OAuth2 トークンエンドポイント
     * OAuth2 トークンエンドポイント
     * @param grantType
     * @param code  (optional)
     * @param redirectUri  (optional)
     * @param clientId  (optional)
     * @param codeVerifier  (optional)
     * @param username  (optional)
     * @param password  (optional)
     * @param scope  (optional)
     * @param refreshToken  (optional)
     * @param clientSecret  (optional)
     * @return OAuth2Token
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postOAuth2Token(
        grantType: kotlin.String,
        code: kotlin.String? = null,
        redirectUri: kotlin.String? = null,
        clientId: kotlin.String? = null,
        codeVerifier: kotlin.String? = null,
        username: kotlin.String? = null,
        password: kotlin.String? = null,
        scope: kotlin.String? = null,
        refreshToken: kotlin.String? = null,
        clientSecret: kotlin.String? = null
    ): HttpResponse<OAuth2Token> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            ParametersBuilder().also {
                grantType?.apply { it.append("grant_type", grantType.toString()) }
                code?.apply { it.append("code", code.toString()) }
                redirectUri?.apply { it.append("redirect_uri", redirectUri.toString()) }
                clientId?.apply { it.append("client_id", clientId.toString()) }
                codeVerifier?.apply { it.append("code_verifier", codeVerifier.toString()) }
                username?.apply { it.append("username", username.toString()) }
                password?.apply { it.append("password", password.toString()) }
                scope?.apply { it.append("scope", scope.toString()) }
                refreshToken?.apply { it.append("refresh_token", refreshToken.toString()) }
                clientSecret?.apply { it.append("client_secret", clientSecret.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/oauth2/token",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * OAuthクライアントのトークンを削除
     * 自分が許可している指定したOAuthクライアントのアクセストークンを全てRevokeします。
     * @param clientId OAuth2クライアントUUID
     * @return void
     */
    open suspend fun revokeClientTokens(clientId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/clients/{clientId}/tokens".replace("{" + "clientId" + "}", "$clientId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * トークンの認可を取り消す
     * 自分の指定したトークンの認可を取り消します。
     * @param tokenId OAuth2トークンUUID
     * @return void
     */
    open suspend fun revokeMyToken(tokenId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/users/me/tokens/{tokenId}".replace("{" + "tokenId" + "}", "$tokenId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * OAuth2 トークン無効化エンドポイント
     * OAuth2 トークン無効化エンドポイント
     * @param token 無効化するOAuth2トークンまたはOAuth2リフレッシュトークン
     * @return void
     */
    open suspend fun revokeOAuth2Token(token: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            ParametersBuilder().also {
                token?.apply { it.append("token", token.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/oauth2/revoke",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
