/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.github.howard12721.trakt.rest.apis

import com.github.howard12721.trakt.rest.infrastructure.*
import com.github.howard12721.trakt.rest.models.*
import io.ktor.client.*
import io.ktor.client.engine.*
import io.ktor.client.request.forms.*
import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializable
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.json.Json
import kotlinx.serialization.serializer

internal open class BotApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(
        baseUrl = baseUrl,
        httpClientEngine = httpClientEngine,
        httpClientConfig = httpClientConfig,
        jsonBlock = jsonSerializer
    )

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ) : super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * BOTをアクティベート
     * 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID
     * @return void
     */
    open suspend fun activateBot(botId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/bots/{botId}/actions/activate".replace("{" + "botId" + "}", "$botId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * BOTのアイコン画像を変更
     * 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID
     * @param file アイコン画像(2MBまでのpng, jpeg, gif)
     * @return void
     */
    open suspend fun changeBotIcon(
        botId: kotlin.String,
        file: io.ktor.client.request.forms.FormPart<io.ktor.client.request.forms.InputProvider>
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            formData {
                file?.apply { append(file) }
            }

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/bots/{botId}/icon".replace("{" + "botId" + "}", "$botId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return multipartFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * WebSocket Mode BOT用通知ストリームに接続します
     * # BOT WebSocketプロトコル  ## 送信  &#x60;コマンド:引数1:引数2:...&#x60; のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。  ### &#x60;rtcstate&#x60;コマンド 自分のWebRTC状態を変更します。 他のコネクションが既に状態を保持している場合、変更することができません。  &#x60;rtcstate:{チャンネルID}:({状態}:{セッションID})*&#x60;  チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。  &#x60;rtcstate:null&#x60;, &#x60;rtcstate:&#x60;, &#x60;rtcstate:channelId:null&#x60;, &#x60;rtcstate:channelId:&#x60;  コネクションが切断された場合、自分のWebRTC状態はリセットされます。  ## 受信  TextMessageとして各種イベントが&#x60;type&#x60;、&#x60;reqId&#x60;、&#x60;body&#x60;を持つJSONとして非同期に送られます。 &#x60;body&#x60;の内容はHTTP Modeの場合のRequest Bodyと同様です。 例外として&#x60;ERROR&#x60;イベントは&#x60;reqId&#x60;を持ちません。  例: PINGイベント &#x60;{\&quot;type\&quot;:\&quot;PING\&quot;,\&quot;reqId\&quot;:\&quot;requestId\&quot;,\&quot;body\&quot;:{\&quot;eventTime\&quot;:\&quot;2019-05-07T04:50:48.582586882Z\&quot;}}&#x60;  ### &#x60;ERROR&#x60;  コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。 非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。 本番環境ではERRORが送られないようにすることが望ましいです。  &#x60;{\&quot;type\&quot;:\&quot;ERROR\&quot;,\&quot;body\&quot;:\&quot;message\&quot;}&#x60;
     * @return void
     */
    open suspend fun connectBotWS(): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/bots/ws",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * BOTを作成
     * BOTを作成します。 作成後に購読イベントの設定を行う必要があります。 さらにHTTP Modeの場合はアクティベーションを行う必要があります。
     * @param postBotRequest  (optional)
     * @return BotDetail
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createBot(postBotRequest: PostBotRequest? = null): HttpResponse<BotDetail> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = postBotRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/bots",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * BOTを削除
     * 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID
     * @return void
     */
    open suspend fun deleteBot(botId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/bots/{botId}".replace("{" + "botId" + "}", "$botId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * BOT情報を変更
     * 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
     * @param botId BOTUUID
     * @param patchBotRequest  (optional)
     * @return void
     */
    open suspend fun editBot(botId: kotlin.String, patchBotRequest: PatchBotRequest? = null): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = patchBotRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/bots/{botId}".replace("{" + "botId" + "}", "$botId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * BOT情報を取得
     * 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
     * @param botId BOTUUID
     * @param detail 詳細情報を含めるかどうか (optional, default to false)
     * @return GetBot200Response
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getBot(botId: kotlin.String, detail: kotlin.Boolean? = false): HttpResponse<GetBot200Response> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        detail?.apply { localVariableQuery["detail"] = listOf("$detail") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/bots/{botId}".replace("{" + "botId" + "}", "$botId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * BOTのアイコン画像を取得
     * 指定したBOTのアイコン画像を取得を取得します。
     * @param botId BOTUUID
     * @return com.github.howard12721.trakt.rest.infrastructure.OctetByteArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getBotIcon(botId: kotlin.String): HttpResponse<com.github.howard12721.trakt.rest.infrastructure.OctetByteArray> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/bots/{botId}/icon".replace("{" + "botId" + "}", "$botId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * BOTのイベントログを取得
     * 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID
     * @param limit 取得する件数 (optional)
     * @param offset 取得するオフセット (optional, default to 0)
     * @return kotlin.collections.List<BotEventLog>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getBotLogs(
        botId: kotlin.String,
        limit: kotlin.Int? = null,
        offset: kotlin.Int? = 0
    ): HttpResponse<kotlin.collections.List<BotEventLog>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/bots/{botId}/logs".replace("{" + "botId" + "}", "$botId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetBotLogsResponse>().map { value }
    }

    @Serializable(GetBotLogsResponse.Companion::class)
    private class GetBotLogsResponse(val value: List<BotEventLog>) {
        companion object : KSerializer<GetBotLogsResponse> {
            private val serializer: KSerializer<List<BotEventLog>> = serializer<List<BotEventLog>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetBotLogsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetBotLogsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * BOTリストを取得
     * BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
     * @param all 全てのBOTを取得するかどうか (optional, default to false)
     * @return kotlin.collections.List<Bot>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getBots(all: kotlin.Boolean? = false): HttpResponse<kotlin.collections.List<Bot>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        all?.apply { localVariableQuery["all"] = listOf("$all") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/bots",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetBotsResponse>().map { value }
    }

    @Serializable(GetBotsResponse.Companion::class)
    private class GetBotsResponse(val value: List<Bot>) {
        companion object : KSerializer<GetBotsResponse> {
            private val serializer: KSerializer<List<Bot>> = serializer<List<Bot>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetBotsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetBotsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * チャンネル参加中のBOTのリストを取得
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @param channelId チャンネルUUID
     * @return kotlin.collections.List<BotUser>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getChannelBots(channelId: kotlin.String): HttpResponse<kotlin.collections.List<BotUser>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/channels/{channelId}/bots".replace("{" + "channelId" + "}", "$channelId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetChannelBotsResponse>().map { value }
    }

    @Serializable(GetChannelBotsResponse.Companion::class)
    private class GetChannelBotsResponse(val value: List<BotUser>) {
        companion object : KSerializer<GetChannelBotsResponse> {
            private val serializer: KSerializer<List<BotUser>> = serializer<List<BotUser>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetChannelBotsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetChannelBotsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * BOTをインアクティベート
     * 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
     * @param botId BOTUUID
     * @return void
     */
    open suspend fun inactivateBot(botId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/bots/{botId}/actions/inactivate".replace("{" + "botId" + "}", "$botId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * BOTをチャンネルに参加させる
     * 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID
     * @param postBotActionJoinRequest  (optional)
     * @return void
     */
    open suspend fun letBotJoinChannel(
        botId: kotlin.String,
        postBotActionJoinRequest: PostBotActionJoinRequest? = null
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = postBotActionJoinRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/bots/{botId}/actions/join".replace("{" + "botId" + "}", "$botId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * BOTをチャンネルから退出させる
     * 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID
     * @param postBotActionLeaveRequest  (optional)
     * @return void
     */
    open suspend fun letBotLeaveChannel(
        botId: kotlin.String,
        postBotActionLeaveRequest: PostBotActionLeaveRequest? = null
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = postBotActionLeaveRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/bots/{botId}/actions/leave".replace("{" + "botId" + "}", "$botId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * BOTのトークンを再発行
     * 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
     * @param botId BOTUUID
     * @return BotTokens
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun reissueBot(botId: kotlin.String): HttpResponse<BotTokens> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/bots/{botId}/actions/reissue".replace("{" + "botId" + "}", "$botId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
