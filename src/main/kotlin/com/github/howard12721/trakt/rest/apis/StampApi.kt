/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.github.howard12721.trakt.rest.apis

import com.github.howard12721.trakt.rest.infrastructure.*
import com.github.howard12721.trakt.rest.models.*
import io.ktor.client.*
import io.ktor.client.engine.*
import io.ktor.client.request.forms.*
import kotlinx.serialization.KSerializer
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.json.Json
import kotlinx.serialization.serializer

internal open class StampApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(
        baseUrl = baseUrl,
        httpClientEngine = httpClientEngine,
        httpClientConfig = httpClientConfig,
        jsonBlock = jsonSerializer
    )

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ) : super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * スタンプを押す
     * 指定したメッセージに指定したスタンプを押します。
     * @param messageId メッセージUUID
     * @param stampId スタンプUUID
     * @param postMessageStampRequest  (optional)
     * @return void
     */
    open suspend fun addMessageStamp(
        messageId: kotlin.String,
        stampId: kotlin.String,
        postMessageStampRequest: PostMessageStampRequest? = null
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = postMessageStampRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/messages/{messageId}/stamps/{stampId}".replace("{" + "messageId" + "}", "$messageId")
                .replace("{" + "stampId" + "}", "$stampId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * スタンプ画像を変更
     * 指定したスタンプの画像を変更します。
     * @param stampId スタンプUUID
     * @param file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @return void
     */
    open suspend fun changeStampImage(
        stampId: kotlin.String,
        file: io.ktor.client.request.forms.FormPart<io.ktor.client.request.forms.InputProvider>
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            formData {
                file?.apply { append(file) }
            }

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/stamps/{stampId}/image".replace("{" + "stampId" + "}", "$stampId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return multipartFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * スタンプを作成
     * スタンプを新規作成します。
     * @param name スタンプ名
     * @param file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @return Stamp
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createStamp(
        name: kotlin.String,
        file: io.ktor.client.request.forms.FormPart<io.ktor.client.request.forms.InputProvider>
    ): HttpResponse<Stamp> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            formData {
                name?.apply { append("name", name) }
                file?.apply { append(file) }
            }

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/stamps",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return multipartFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * スタンプパレットを作成
     * スタンプパレットを作成します。
     * @param postStampPaletteRequest  (optional)
     * @return StampPalette
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createStampPalette(postStampPaletteRequest: PostStampPaletteRequest? = null): HttpResponse<StampPalette> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = postStampPaletteRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/stamp-palettes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * スタンプを削除
     * 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
     * @param stampId スタンプUUID
     * @return void
     */
    open suspend fun deleteStamp(stampId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/stamps/{stampId}".replace("{" + "stampId" + "}", "$stampId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * スタンプパレットを削除
     * 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
     * @param paletteId スタンプパレットUUID
     * @return void
     */
    open suspend fun deleteStampPalette(paletteId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/stamp-palettes/{paletteId}".replace("{" + "paletteId" + "}", "$paletteId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * スタンプ情報を変更
     * 指定したスタンプの情報を変更します。
     * @param stampId スタンプUUID
     * @param patchStampRequest  (optional)
     * @return void
     */
    open suspend fun editStamp(
        stampId: kotlin.String,
        patchStampRequest: PatchStampRequest? = null
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = patchStampRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/stamps/{stampId}".replace("{" + "stampId" + "}", "$stampId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * スタンプパレットを編集
     * 指定したスタンプパレットを編集します。 リクエストのスタンプの配列の順番は保存されて変更されます。 対象のスタンプパレットの管理権限が必要です。
     * @param paletteId スタンプパレットUUID
     * @param patchStampPaletteRequest  (optional)
     * @return void
     */
    open suspend fun editStampPalette(
        paletteId: kotlin.String,
        patchStampPaletteRequest: PatchStampPaletteRequest? = null
    ): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody = patchStampPaletteRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/stamp-palettes/{paletteId}".replace("{" + "paletteId" + "}", "$paletteId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * メッセージのスタンプリストを取得
     * 指定したメッセージに押されているスタンプのリストを取得します。
     * @param messageId メッセージUUID
     * @return kotlin.collections.List<MessageStamp>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMessageStamps(messageId: kotlin.String): HttpResponse<kotlin.collections.List<MessageStamp>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/messages/{messageId}/stamps".replace("{" + "messageId" + "}", "$messageId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetMessageStampsResponse>().map { value }
    }

    @Serializable(GetMessageStampsResponse.Companion::class)
    private class GetMessageStampsResponse(val value: List<MessageStamp>) {
        companion object : KSerializer<GetMessageStampsResponse> {
            private val serializer: KSerializer<List<MessageStamp>> = serializer<List<MessageStamp>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetMessageStampsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetMessageStampsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * スタンプ履歴を取得
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     * @param limit 件数 (optional, default to 100)
     * @return kotlin.collections.List<StampHistoryEntry>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMyStampHistory(limit: kotlin.Int? = 100): HttpResponse<kotlin.collections.List<StampHistoryEntry>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me/stamp-history",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetMyStampHistoryResponse>().map { value }
    }

    @Serializable(GetMyStampHistoryResponse.Companion::class)
    private class GetMyStampHistoryResponse(val value: List<StampHistoryEntry>) {
        companion object : KSerializer<GetMyStampHistoryResponse> {
            private val serializer: KSerializer<List<StampHistoryEntry>> = serializer<List<StampHistoryEntry>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetMyStampHistoryResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetMyStampHistoryResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * スタンプ情報を取得
     * 指定したスタンプの情報を取得します。
     * @param stampId スタンプUUID
     * @return Stamp
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getStamp(stampId: kotlin.String): HttpResponse<Stamp> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/stamps/{stampId}".replace("{" + "stampId" + "}", "$stampId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * スタンプ画像を取得
     * 指定したIDのスタンプ画像を返します。
     * @param stampId スタンプUUID
     * @return com.github.howard12721.trakt.rest.infrastructure.OctetByteArray
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getStampImage(stampId: kotlin.String): HttpResponse<com.github.howard12721.trakt.rest.infrastructure.OctetByteArray> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/stamps/{stampId}/image".replace("{" + "stampId" + "}", "$stampId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * スタンプパレットを取得
     * 指定したスタンプパレットの情報を取得します。
     * @param paletteId スタンプパレットUUID
     * @return StampPalette
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getStampPalette(paletteId: kotlin.String): HttpResponse<StampPalette> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/stamp-palettes/{paletteId}".replace("{" + "paletteId" + "}", "$paletteId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * スタンプパレットのリストを取得
     * 自身が所有しているスタンプパレットのリストを取得します。
     * @return kotlin.collections.List<StampPalette>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getStampPalettes(): HttpResponse<kotlin.collections.List<StampPalette>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/stamp-palettes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetStampPalettesResponse>().map { value }
    }

    @Serializable(GetStampPalettesResponse.Companion::class)
    private class GetStampPalettesResponse(val value: List<StampPalette>) {
        companion object : KSerializer<GetStampPalettesResponse> {
            private val serializer: KSerializer<List<StampPalette>> = serializer<List<StampPalette>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetStampPalettesResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetStampPalettesResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * スタンプ統計情報を取得
     * 指定したスタンプの統計情報を取得します。
     * @param stampId スタンプUUID
     * @return StampStats
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getStampStats(stampId: kotlin.String): HttpResponse<StampStats> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/stamps/{stampId}/stats".replace("{" + "stampId" + "}", "$stampId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * enum for parameter type
     */
    @Serializable
    enum class TypeGetStamps(val value: kotlin.String) {

        @SerialName(value = "unicode")
        unicode("unicode"),

        @SerialName(value = "original")
        original("original")

    }

    /**
     * スタンプリストを取得
     * スタンプのリストを取得します。
     * @param includeUnicode Unicode絵文字を含ませるかどうか Deprecated: typeクエリを指定しなければ全てのスタンプを取得できるため、そちらを利用してください  (optional, default to true)
     * @param type 取得するスタンプの種類 (optional)
     * @return kotlin.collections.List<StampWithThumbnail>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getStamps(
        includeUnicode: kotlin.Boolean? = true,
        type: TypeGetStamps? = null
    ): HttpResponse<kotlin.collections.List<StampWithThumbnail>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        includeUnicode?.apply { localVariableQuery["include-unicode"] = listOf("$includeUnicode") }
        type?.apply { localVariableQuery["type"] = listOf("${type.value}") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/stamps",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetStampsResponse>().map { value }
    }

    @Serializable(GetStampsResponse.Companion::class)
    private class GetStampsResponse(val value: List<StampWithThumbnail>) {
        companion object : KSerializer<GetStampsResponse> {
            private val serializer: KSerializer<List<StampWithThumbnail>> = serializer<List<StampWithThumbnail>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetStampsResponse) =
                serializer.serialize(encoder, value.value)

            override fun deserialize(decoder: Decoder) = GetStampsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * スタンプを消す
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     * @param messageId メッセージUUID
     * @param stampId スタンプUUID
     * @return void
     */
    open suspend fun removeMessageStamp(messageId: kotlin.String, stampId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("OAuth2", "bearerAuth")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/messages/{messageId}/stamps/{stampId}".replace("{" + "messageId" + "}", "$messageId")
                .replace("{" + "stampId" + "}", "$stampId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
